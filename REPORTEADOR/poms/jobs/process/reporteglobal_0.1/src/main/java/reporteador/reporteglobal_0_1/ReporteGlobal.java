// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package reporteador.reporteglobal_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: ReporteGlobal Purpose: Generar Reporte Global<br>
 * Description: Reporte Global <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class ReporteGlobal implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(database != null){
				
					this.setProperty("database", database.toString());
				
			}
			
			if(destination != null){
				
					this.setProperty("destination", destination.toString());
				
			}
			
			if(filename != null){
				
					this.setProperty("filename", filename.toString());
				
			}
			
			if(host != null){
				
					this.setProperty("host", host.toString());
				
			}
			
			if(IdSociedad != null){
				
					this.setProperty("IdSociedad", IdSociedad.toString());
				
			}
			
			if(password != null){
				
					this.setProperty("password", password.toString());
				
			}
			
			if(port != null){
				
					this.setProperty("port", port.toString());
				
			}
			
			if(username != null){
				
					this.setProperty("username", username.toString());
				
			}
			
		}

public String database;
public String getDatabase(){
	return this.database;
}
public String destination;
public String getDestination(){
	return this.destination;
}
public String filename;
public String getFilename(){
	return this.filename;
}
public String host;
public String getHost(){
	return this.host;
}
public String IdSociedad;
public String getIdSociedad(){
	return this.IdSociedad;
}
public java.lang.String password;
public java.lang.String getPassword(){
	return this.password;
}
public String port;
public String getPort(){
	return this.port;
}
public String username;
public String getUsername(){
	return this.username;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ReporteGlobal";
	private final String projectName = "REPORTEADOR";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ReporteGlobal.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ReporteGlobal.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_REPORTEADOR_ReporteGlobal = new byte[0];
    static byte[] commonByteArray_REPORTEADOR_ReporteGlobal = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REPORTEADOR_ReporteGlobal.length) {
				if(length < 1024 && commonByteArray_REPORTEADOR_ReporteGlobal.length == 0) {
   					commonByteArray_REPORTEADOR_ReporteGlobal = new byte[1024];
				} else {
   					commonByteArray_REPORTEADOR_ReporteGlobal = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REPORTEADOR_ReporteGlobal, 0, length);
			strReturn = new String(commonByteArray_REPORTEADOR_ReporteGlobal, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REPORTEADOR_ReporteGlobal) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tContextLoad_1 = 0;
		
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = context.filename;
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.filename, "ISO-8859-15",";","\n",true,0,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row3 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row3 = new row3Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row3.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row3.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row3 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (row3.key != null){
                          tmp_key_tContextLoad_1 = row3.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          row3.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(row3.key != null) {
                    key_tContextLoad_1 =
                        row3.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(row3.value != null) {
                    value_tContextLoad_1 =
                        row3.value;
                        }
				
				String currentValue_tContextLoad_1 = value_tContextLoad_1;
										
						if ((key_tContextLoad_1 != null) && ("password".equals(key_tContextLoad_1)) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "database".equals(key_tContextLoad_1))
        {
           context.database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "destination".equals(key_tContextLoad_1))
        {
           context.destination=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "filename".equals(key_tContextLoad_1))
        {
           context.filename=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "host".equals(key_tContextLoad_1))
        {
           context.host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "IdSociedad".equals(key_tContextLoad_1))
        {
           context.IdSociedad=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "password".equals(key_tContextLoad_1))
        {
           context.password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "port".equals(key_tContextLoad_1))
        {
           context.port=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "username".equals(key_tContextLoad_1))
        {
           context.username=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_begin ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.filename) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
		parametersToEncrypt_tContextLoad_1.add("password");
		
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + context.host ;
		String port_tDBConnection_1 = context.port;
		String dbname_tDBConnection_1 = context.database ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + context.port;
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + context.database; 
    	}
		url_tDBConnection_1 += ";appName=" + projectName + ";" + "";  
	String dbUser_tDBConnection_1 = context.username;
	
	
		
	final String decryptedPassword_tDBConnection_1 = context.password; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_1", "");

	globalMap.put("db_tDBConnection_1",  context.database);

	globalMap.put("conn_tDBConnection_1",conn_tDBConnection_1);
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBInput_2Process(globalMap);



/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_REPORTEADOR_ReporteGlobal = new byte[0];
    static byte[] commonByteArray_REPORTEADOR_ReporteGlobal = new byte[0];

	
			    public int idMalla;

				public int getIdMalla () {
					return this.idMalla;
				}
				
			    public String Malla;

				public String getMalla () {
					return this.Malla;
				}
				
			    public String FechaCreacion;

				public String getFechaCreacion () {
					return this.FechaCreacion;
				}
				
			    public String Estado;

				public String getEstado () {
					return this.Estado;
				}
				
			    public String Escuela;

				public String getEscuela () {
					return this.Escuela;
				}
				
			    public int VersionMalla;

				public int getVersionMalla () {
					return this.VersionMalla;
				}
				
			    public String VigenciaVersionDesde;

				public String getVigenciaVersionDesde () {
					return this.VigenciaVersionDesde;
				}
				
			    public String VigenciaVersionHasta;

				public String getVigenciaVersionHasta () {
					return this.VigenciaVersionHasta;
				}
				
			    public String EstadoVersion;

				public String getEstadoVersion () {
					return this.EstadoVersion;
				}
				
			    public String NumeroItinerario;

				public String getNumeroItinerario () {
					return this.NumeroItinerario;
				}
				
			    public String NombreItinerario;

				public String getNombreItinerario () {
					return this.NombreItinerario;
				}
				
			    public String ItinerarioVigenciaDesde;

				public String getItinerarioVigenciaDesde () {
					return this.ItinerarioVigenciaDesde;
				}
				
			    public String ItinerarioVigenciaHasta;

				public String getItinerarioVigenciaHasta () {
					return this.ItinerarioVigenciaHasta;
				}
				
			    public String EstadoItinerario;

				public String getEstadoItinerario () {
					return this.EstadoItinerario;
				}
				
			    public String RUT;

				public String getRUT () {
					return this.RUT;
				}
				
			    public String NombreColaborador;

				public String getNombreColaborador () {
					return this.NombreColaborador;
				}
				
			    public java.util.Date FechaMatricula;

				public java.util.Date getFechaMatricula () {
					return this.FechaMatricula;
				}
				
			    public String EstadoColaborador;

				public String getEstadoColaborador () {
					return this.EstadoColaborador;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public String SociedadContratante;

				public String getSociedadContratante () {
					return this.SociedadContratante;
				}
				
			    public String UnidadOrganizacional;

				public String getUnidadOrganizacional () {
					return this.UnidadOrganizacional;
				}
				
			    public String UnidadNegocio;

				public String getUnidadNegocio () {
					return this.UnidadNegocio;
				}
				
			    public String Area;

				public String getArea () {
					return this.Area;
				}
				
			    public String NombreLocal;

				public String getNombreLocal () {
					return this.NombreLocal;
				}
				
			    public String CodigoLocal;

				public String getCodigoLocal () {
					return this.CodigoLocal;
				}
				
			    public String Cargo;

				public String getCargo () {
					return this.Cargo;
				}
				
			    public String FamiliaCargo;

				public String getFamiliaCargo () {
					return this.FamiliaCargo;
				}
				
			    public String RutJefe;

				public String getRutJefe () {
					return this.RutJefe;
				}
				
			    public String NombreJefe;

				public String getNombreJefe () {
					return this.NombreJefe;
				}
				
			    public String EmailJefe;

				public String getEmailJefe () {
					return this.EmailJefe;
				}
				
			    public String Avance;

				public String getAvance () {
					return this.Avance;
				}
				
			    public String EstadoAvance;

				public String getEstadoAvance () {
					return this.EstadoAvance;
				}
				
			    public String Cantidad;

				public String getCantidad () {
					return this.Cantidad;
				}
				
			    public String Aprobadas;

				public String getAprobadas () {
					return this.Aprobadas;
				}
				
			    public String Reprobadas;

				public String getReprobadas () {
					return this.Reprobadas;
				}
				
			    public String Pendientes;

				public String getPendientes () {
					return this.Pendientes;
				}
				
			    public String NombreUC;

				public String getNombreUC () {
					return this.NombreUC;
				}
				
			    public String EstadoUC;

				public String getEstadoUC () {
					return this.EstadoUC;
				}
				
			    public String Nota;

				public String getNota () {
					return this.Nota;
				}
				
			    public String Fecha;

				public String getFecha () {
					return this.Fecha;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REPORTEADOR_ReporteGlobal.length) {
				if(length < 1024 && commonByteArray_REPORTEADOR_ReporteGlobal.length == 0) {
   					commonByteArray_REPORTEADOR_ReporteGlobal = new byte[1024];
				} else {
   					commonByteArray_REPORTEADOR_ReporteGlobal = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REPORTEADOR_ReporteGlobal, 0, length);
			strReturn = new String(commonByteArray_REPORTEADOR_ReporteGlobal, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REPORTEADOR_ReporteGlobal) {

        	try {

        		int length = 0;
		
			        this.idMalla = dis.readInt();
					
					this.Malla = readString(dis);
					
					this.FechaCreacion = readString(dis);
					
					this.Estado = readString(dis);
					
					this.Escuela = readString(dis);
					
			        this.VersionMalla = dis.readInt();
					
					this.VigenciaVersionDesde = readString(dis);
					
					this.VigenciaVersionHasta = readString(dis);
					
					this.EstadoVersion = readString(dis);
					
					this.NumeroItinerario = readString(dis);
					
					this.NombreItinerario = readString(dis);
					
					this.ItinerarioVigenciaDesde = readString(dis);
					
					this.ItinerarioVigenciaHasta = readString(dis);
					
					this.EstadoItinerario = readString(dis);
					
					this.RUT = readString(dis);
					
					this.NombreColaborador = readString(dis);
					
					this.FechaMatricula = readDate(dis);
					
					this.EstadoColaborador = readString(dis);
					
					this.Email = readString(dis);
					
					this.SociedadContratante = readString(dis);
					
					this.UnidadOrganizacional = readString(dis);
					
					this.UnidadNegocio = readString(dis);
					
					this.Area = readString(dis);
					
					this.NombreLocal = readString(dis);
					
					this.CodigoLocal = readString(dis);
					
					this.Cargo = readString(dis);
					
					this.FamiliaCargo = readString(dis);
					
					this.RutJefe = readString(dis);
					
					this.NombreJefe = readString(dis);
					
					this.EmailJefe = readString(dis);
					
					this.Avance = readString(dis);
					
					this.EstadoAvance = readString(dis);
					
					this.Cantidad = readString(dis);
					
					this.Aprobadas = readString(dis);
					
					this.Reprobadas = readString(dis);
					
					this.Pendientes = readString(dis);
					
					this.NombreUC = readString(dis);
					
					this.EstadoUC = readString(dis);
					
					this.Nota = readString(dis);
					
					this.Fecha = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.idMalla);
					
					// String
				
						writeString(this.Malla,dos);
					
					// String
				
						writeString(this.FechaCreacion,dos);
					
					// String
				
						writeString(this.Estado,dos);
					
					// String
				
						writeString(this.Escuela,dos);
					
					// int
				
		            	dos.writeInt(this.VersionMalla);
					
					// String
				
						writeString(this.VigenciaVersionDesde,dos);
					
					// String
				
						writeString(this.VigenciaVersionHasta,dos);
					
					// String
				
						writeString(this.EstadoVersion,dos);
					
					// String
				
						writeString(this.NumeroItinerario,dos);
					
					// String
				
						writeString(this.NombreItinerario,dos);
					
					// String
				
						writeString(this.ItinerarioVigenciaDesde,dos);
					
					// String
				
						writeString(this.ItinerarioVigenciaHasta,dos);
					
					// String
				
						writeString(this.EstadoItinerario,dos);
					
					// String
				
						writeString(this.RUT,dos);
					
					// String
				
						writeString(this.NombreColaborador,dos);
					
					// java.util.Date
				
						writeDate(this.FechaMatricula,dos);
					
					// String
				
						writeString(this.EstadoColaborador,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// String
				
						writeString(this.SociedadContratante,dos);
					
					// String
				
						writeString(this.UnidadOrganizacional,dos);
					
					// String
				
						writeString(this.UnidadNegocio,dos);
					
					// String
				
						writeString(this.Area,dos);
					
					// String
				
						writeString(this.NombreLocal,dos);
					
					// String
				
						writeString(this.CodigoLocal,dos);
					
					// String
				
						writeString(this.Cargo,dos);
					
					// String
				
						writeString(this.FamiliaCargo,dos);
					
					// String
				
						writeString(this.RutJefe,dos);
					
					// String
				
						writeString(this.NombreJefe,dos);
					
					// String
				
						writeString(this.EmailJefe,dos);
					
					// String
				
						writeString(this.Avance,dos);
					
					// String
				
						writeString(this.EstadoAvance,dos);
					
					// String
				
						writeString(this.Cantidad,dos);
					
					// String
				
						writeString(this.Aprobadas,dos);
					
					// String
				
						writeString(this.Reprobadas,dos);
					
					// String
				
						writeString(this.Pendientes,dos);
					
					// String
				
						writeString(this.NombreUC,dos);
					
					// String
				
						writeString(this.EstadoUC,dos);
					
					// String
				
						writeString(this.Nota,dos);
					
					// String
				
						writeString(this.Fecha,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("idMalla="+String.valueOf(idMalla));
		sb.append(",Malla="+Malla);
		sb.append(",FechaCreacion="+FechaCreacion);
		sb.append(",Estado="+Estado);
		sb.append(",Escuela="+Escuela);
		sb.append(",VersionMalla="+String.valueOf(VersionMalla));
		sb.append(",VigenciaVersionDesde="+VigenciaVersionDesde);
		sb.append(",VigenciaVersionHasta="+VigenciaVersionHasta);
		sb.append(",EstadoVersion="+EstadoVersion);
		sb.append(",NumeroItinerario="+NumeroItinerario);
		sb.append(",NombreItinerario="+NombreItinerario);
		sb.append(",ItinerarioVigenciaDesde="+ItinerarioVigenciaDesde);
		sb.append(",ItinerarioVigenciaHasta="+ItinerarioVigenciaHasta);
		sb.append(",EstadoItinerario="+EstadoItinerario);
		sb.append(",RUT="+RUT);
		sb.append(",NombreColaborador="+NombreColaborador);
		sb.append(",FechaMatricula="+String.valueOf(FechaMatricula));
		sb.append(",EstadoColaborador="+EstadoColaborador);
		sb.append(",Email="+Email);
		sb.append(",SociedadContratante="+SociedadContratante);
		sb.append(",UnidadOrganizacional="+UnidadOrganizacional);
		sb.append(",UnidadNegocio="+UnidadNegocio);
		sb.append(",Area="+Area);
		sb.append(",NombreLocal="+NombreLocal);
		sb.append(",CodigoLocal="+CodigoLocal);
		sb.append(",Cargo="+Cargo);
		sb.append(",FamiliaCargo="+FamiliaCargo);
		sb.append(",RutJefe="+RutJefe);
		sb.append(",NombreJefe="+NombreJefe);
		sb.append(",EmailJefe="+EmailJefe);
		sb.append(",Avance="+Avance);
		sb.append(",EstadoAvance="+EstadoAvance);
		sb.append(",Cantidad="+Cantidad);
		sb.append(",Aprobadas="+Aprobadas);
		sb.append(",Reprobadas="+Reprobadas);
		sb.append(",Pendientes="+Pendientes);
		sb.append(",NombreUC="+NombreUC);
		sb.append(",EstadoUC="+EstadoUC);
		sb.append(",Nota="+Nota);
		sb.append(",Fecha="+Fecha);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		int columnIndex_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1=context.destination+"ReporteGlobalDetalle_"+TalendDate.formatDate("yyyyMMdd_HHmm",TalendDate.getCurrentDate())+".xlsx";
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_1.setSheet("Detalle");
		xlsxTool_tFileOutputExcel_1.setAppend(false,false);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_1) {
			
				xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
			
		}
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		
		if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_1.addRow();
		
		xlsxTool_tFileOutputExcel_1.addCellValue("idMalla");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Malla");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FechaCreacion");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Estado");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Escuela");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("VersionMalla");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("VigenciaVersionDesde");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("VigenciaVersionHasta");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("EstadoVersion");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NumeroItinerario");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NombreItinerario");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ItinerarioVigenciaDesde");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ItinerarioVigenciaHasta");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("EstadoItinerario");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("RUT");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NombreColaborador");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FechaMatricula");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("EstadoColaborador");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Email");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SociedadContratante");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UnidadOrganizacional");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UnidadNegocio");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Area");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NombreLocal");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CodigoLocal");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Cargo");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FamiliaCargo");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("RutJefe");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NombreJefe");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("EmailJefe");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Avance");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("EstadoAvance");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Cantidad");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Aprobadas");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Reprobadas");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Pendientes");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NombreUC");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("EstadoUC");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Nota");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Fecha");
		
		nb_line_tFileOutputExcel_1++; 
		
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_2 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "CREATE TABLE #ReporteGlobalMallas \n(Id INT IDENTITY(1, 1)  PRIMARY KEY,\nFila BIGINT,\n[Id Malla] INT,\n[Malla] VARCHA"
+"R(255),\n[Fecha Creación] VARCHAR(255),\n[Estado] VARCHAR(255),\nIdNominaMalla INT,\nEscuela_Id INT,\n[Escuela] VARCHAR("
+"255),\n[Versión Malla] INT,\n[Vigencia Versión] VARCHAR(255),\n[Version_VigenciaDesde] VARCHAR(255),\nVersion_VigenciaHa"
+"sta VARCHAR(255),\n[Estado Versión] VARCHAR(255), \n[Número Itinerario] INT,\nItinerario_VigenciaDesde VARCHAR(255),\nIt"
+"inerario_VigenciaHasta VARCHAR(255),\n[Nombre Itinerario] VARCHAR(255),\n[Estado Itinerario] VARCHAR(255),\n[Vigencia It"
+"inerario] VARCHAR(255),\nPersona_Id INT,\n[RUT] VARCHAR(255),\n[Nombre Colaborador] VARCHAR(255),\nEstadoColaborador VAR"
+"CHAR(255), \n[Email] VARCHAR(255), \nSociedadContratante_Id INT,\n[Sociedad Contratante] VARCHAR(255),  \nUOrganizaciona"
+"l_Id INT, \n[Unidad Organizacional] VARCHAR(255),\nUNegocio_Id INT,\n[Unidad de Negocio] VARCHAR(255), \nArea_Id INT, \n"
+"[Área]  VARCHAR(255),\nLocal_Id INT, \nLocal_Codigo  VARCHAR(255), \n[Local] VARCHAR(255),\nCargo_Id INT,\n[Cargo] VARCH"
+"AR(255),\n[Familia Cargo] VARCHAR(255),\n[Rut Jefe] VARCHAR(255),\n[Nombre Jefe] VARCHAR(255), \n[Email Jefe] VARCHAR(25"
+"5), \nAvance FLOAT,\n[Cantidad] INT, \nAprobadas INT,\nReprobadas INT,\nPendientes INT,\nProcesado INT,\nNominaActiva BI"
+"T\n)\n\nINSERT INTO  #ReporteGlobalMallas\n(Fila,[Id Malla],[Malla],[Fecha Creación],[Estado],IdNominaMalla,Escuela_Id,["
+"Escuela],[Versión Malla],[Vigencia Versión],[Version_VigenciaDesde],Version_VigenciaHasta,\n[Estado Versión], [Número It"
+"inerario],Itinerario_VigenciaDesde,Itinerario_VigenciaHasta,[Nombre Itinerario],[Estado Itinerario],[Vigencia Itinerario"
+"],Persona_Id,\n[RUT],[Nombre Colaborador], EstadoColaborador, [Email], SociedadContratante_Id, [Sociedad Contratante],  "
+"UOrganizacional_Id, [Unidad Organizacional],UNegocio_Id,\n[Unidad de Negocio], Area_Id, [Área],Local_Id, Local_Codigo, ["
+"Local],Cargo_Id,[Cargo],[Familia Cargo],[Rut Jefe],[Nombre Jefe], [Email Jefe], Avance,[Cantidad], Aprobadas,\nReprobada"
+"s,Pendientes,Procesado,NominaActiva)\nselect\n	    \n		ROW_NUMBER() OVER (ORDER BY m.Id DESC, p.ApellidoPaterno ASC),\n	"
+"	m.Id,\n		m.Nombre,\n		CONVERT(VARCHAR(10), ISNULL(m.FechaCreacion, ''), 103), \n		(CASE WHEN m.Activo = 1 THEN 'Activa'"
+" ELSE 'No Activa' END),\n		nm.Id,\n		esc.Id,\n		esc.Nombre,\n		vm.[Version],\n		ISNULL(CONVERT(VARCHAR(10), ISNULL(vm.Fe"
+"chaInicio, ''), 103), '') + ' - ' + ISNULL(CONVERT(VARCHAR(10), vm.FechaTermino, 103), ''),\n		vm.FechaInicio,\n		vm.Fec"
+"haTermino, \n		(CASE WHEN vm.Activo = 1 THEN 'Vigente' ELSE 'No Vigente' END),\n		mi.Id,\n		mi.FechaInicio, \n		mi.Fecha"
+"Termino,\n		mi.Nombre, \n		(CASE WHEN mi.Activo = 1 THEN 'Vigente' ELSE 'No Vigente' END), \n		ISNULL(CONVERT(VARCHAR(10"
+"), ISNULL(mi.FechaInicio, ''), 103), '') + ' - ' + ISNULL(CONVERT(VARCHAR(10), mi.FechaTermino, 103), ''),				\n		p.Id,"
+"\n		p.IdentificacionUnica + '-' + p.Dv, \n		p.ApellidoPaterno + ' ' + p.ApellidoMaterno + ' ' + p.Nombre, \n		(CASE WHEN "
+"p.Activo = 1 THEN 'Vigente' ELSE 'No Vigente' END),\n		ISNULL(p.Email, ''),\n		pl.IdSociedadContratante, \n		sc.Nombre,"
+"\n		uo.Id,\n		uo.Nombre, 		\n		un.Id,\n		un.Nombre, \n		a.Id,\n		a.Nombre, \n		loc.Id, \n		loc.CodigoLocal, \n		loc.Nombr"
+"eLocal,\n		c.Id, \n		c.Nombre, 		\n		fc.Nombre,\n		pj.IdentificacionUnica + '-' + pj.Dv, \n		pj.Nombre + ' ' + pj.Apelli"
+"doPaterno + ' ' + pj.ApellidoMaterno, \n		pj.Email,				\n		CAST(CAST(CASE WHEN (SELECT COUNT(*) FROM MA_Componente mc\n	"
+"	JOIN MA_Seccion ms ON ms.Id = mc.IdSeccion AND ms.IdSociedad = mc.IdSociedad WHERE ms.IdVersion = vm.Id) = 0 THEN CAST("
+"0 AS FLOAT) \n		ELSE CAST(nm.CantUCAprobadas AS FLOAT)/CAST((SELECT COUNT(*) FROM MA_Componente mc JOIN MA_Seccion ms ON"
+" ms.Id = mc.IdSeccion AND ms.IdSociedad = mc.IdSociedad\n		WHERE ms.IdVersion = vm.Id) AS FLOAT)*100.0 END AS DECIMAL(18"
+",2)) AS FLOAT),	\n		(SELECT COUNT(*) FROM MA_Componente mc JOIN MA_Seccion ms ON ms.Id = mc.IdSeccion AND ms.IdSociedad "
+"= mc.IdSociedad WHERE ms.IdVersion = vm.Id), \n		nm.CantUCAprobadas,	\n		nm.CantUCReprobadas, \n	   (SELECT COUNT(*) FRO"
+"M MA_Componente mc JOIN MA_Seccion ms ON ms.Id = mc.IdSeccion AND ms.IdSociedad = mc.IdSociedad WHERE ms.IdVersion = vm."
+"Id) - (nm.CantUCAprobadas + nm.CantUCReprobadas),\n		0,\n		nm.Activo	\n		FROM MA_Malla m\n	LEFT JOIN MA_Version vm\n		ON"
+" m.Id = vm.IdMalla\n			AND m.IdSociedad = vm.IdSociedad\n	JOIN MA_Itinerario mi\n		ON vm.Id = mi.IdVersion\n			AND vm.Id"
+"Sociedad = mi.IdSociedad\n	JOIN MA_Nomina nm\n		ON mi.Id = nm.IdItinerario\n			AND mi.IdSociedad = nm.IdSociedad\n	JOIN "
+"Escuela esc\n		ON esc.Id = m.IdEscuela\n	LEFT JOIN Personas p\n		ON p.Id = nm.IdPersona\n	JOIN PosicionLaboral pl\n		ON "
+"pl.IdPersona = p.Id\n			AND pl.Activo = 1 \n			AND pl.Estado = 2\n	JOIN InformacionPersonal ip\n		ON ip.IdPersona = p.Id"
+"\n	JOIN UnidadesOrganizacional uo\n		ON pl.IdUnidadOrganizacional = uo.Id\n	LEFT JOIN Cargos c\n		ON c.Id = pl.IdCargo\n"
+"	LEFT JOIN UnidadesNegocio un\n		ON un.Id = pl.IdUnidadNegocio\n	JOIN Sociedad sc\n		ON sc.Id = pl.IdSociedadContratante"
+"\n			AND sc.Activo = 1\n	LEFT JOIN Area a\n		ON a.Id = ip.IdArea\n	LEFT JOIN [Locales] loc\n		ON loc.Id = ip.IdLocal\n	L"
+"EFT JOIN FamiliaCargo fc\n		ON c.IdFamiliaCargo = fc.Id\n	LEFT JOIN Personas pj\n		ON pl.IdPersonaJefe = pj.Id\n			AND p"
+"j.Activo = 1\n	WHERE pl.Id = (SELECT MAX(pl1.Id) FROM PosicionLaboral pl1\n					WHERE pl1.IdPersona = pl.IdPersona\n				"
+"	AND pl1.Estado = pl.Estado)\n	AND pl.Estado = 2\n	AND nm.Activo = 1\n	AND m.IdSociedad = "+ context.IdSociedad +"\n	ORDER BY \n	m.Id DESC,\n	p.ApellidoPaterno ASC\n\nCREATE TABLE #UC_ReporteGlobal \n	(Id INT IDENTITY(1, 1) PRIMARY K"
+"EY,IdReporteGlobal INT,IdUC INT,Fecha VARCHAR(255),Nota VARCHAR(255), Estado VARCHAR(255));\nWITH cteUninadesCurriculare"
+"s (idUc) AS \n	(\n	SELECT distinct  mc.IdUnidadCurricular\n		FROM #ReporteGlobalMallas\n			LEFT JOIN MA_Version vm ON vm"
+".IdMalla = #ReporteGlobalMallas.[Id Malla]\n			LEFT JOIN MA_Seccion ms	ON vm.Id = ms.IdVersion AND vm.IdSociedad = ms.Id"
+"Sociedad\n			LEFT JOIN MA_Componente mc ON ms.Id = mc.IdSeccion AND ms.IdSociedad = mc.IdSociedad\n			LEFT JOIN Catalogo"
+"Curso cc ON cc.Id = mc.IdUnidadCurricular AND mc.IdSociedad = cc.IdSociedad\n	)\n	INSERT INTO #UC_ReporteGlobal \n		(IdR"
+"eporteGlobal,IdUC,Fecha,Nota, Estado)\n	SELECT DISTINCT rgm.id as idReporteGlobal,uc.idUc,		\n	ISNULL((CASE WHEN CAST(uc"
+".idUc AS VARCHAR)  IN (SELECT MA_Componente.IdUnidadCurricular \n											 FROM MA_Version  \n												INNER JOIN M"
+"A_Seccion on MA_Seccion.IdVersion = MA_Version.Id AND MA_Version.IdMalla =  rgm.[Id Malla] \n												INNER JOIN MA_C"
+"omponente on MA_Componente.IdSeccion = MA_Seccion.Id) \n		THEN 'N/D' ELSE '-' END ),'-') AS Fecha,\n	ISNULL((CASE WHEN C"
+"AST(uc.idUc AS VARCHAR)  IN (SELECT MA_Componente.IdUnidadCurricular \n											 FROM MA_Version  \n												INNER "
+"JOIN MA_Seccion on MA_Seccion.IdVersion = MA_Version.Id AND MA_Version.IdMalla =  rgm.[Id Malla] \n												INNER JOI"
+"N MA_Componente on MA_Componente.IdSeccion = MA_Seccion.Id) \n		THEN 'N/D' ELSE '-' END ),'-') AS Nota,\n	ISNULL((CASE W"
+"HEN CAST(uc.idUc AS VARCHAR)  IN (SELECT MA_Componente.IdUnidadCurricular \n											 FROM MA_Version  \n												I"
+"NNER JOIN MA_Seccion on MA_Seccion.IdVersion = MA_Version.Id AND MA_Version.IdMalla =  rgm.[Id Malla] \n												INNE"
+"R JOIN MA_Componente on MA_Componente.IdSeccion = MA_Seccion.Id) \n		THEN 'N/D' ELSE '-' END ),'-') AS Estado\n	FROM #Re"
+"porteGlobalMallas rgm\n		CROSS JOIN cteUninadesCurriculares uc\n		INNER JOIN MA_Nomina n on n.id = rgm.IdNominaMalla AND"
+" rgm.Persona_Id = n.idPersona\n		LEFT JOIN MA_DetalleNOmina dn on dn.IdNomina = n.id\n	WHERE uc.idUc IS NOT NULL\n	ORDER"
+" BY rgm.id,uc.idUc\n\n	UPDATE #UC_ReporteGlobal\n	SET Fecha = ISNULL((CASE WHEN dn.IdSituacionFinal IN (1,2,3) THEN \n		"
+"						(CASE WHEN dn.FechaActualizacion IS NULL THEN 'N/D' ELSE CONVERT(varchar, dn.FechaActualizacion , 105) END) END),'"
+"-'),\n	Nota = (CASE \n			WHEN dn.IdSituacionFinal IN (1) THEN  \n				(CASE WHEN (dn.PorcentajeEvaluacion) IS NOT NULL \n"
+"					  THEN (CASE WHEN (dn.PorcentajeEvaluacion <> '-1') THEN CAST(dn.PorcentajeEvaluacion AS VARCHAR) + '%' ELSE 'N/A' "
+"END) ELSE 'N/D' END)\n	WHEN dn.IdSituacionFinal IN (2,3) THEN \n		(CASE WHEN (dn.PorcentajeEvaluacion) IS NOT NULL \n			"
+"  THEN (CASE WHEN (dn.PorcentajeEvaluacion <> '-1') THEN CAST(dn.PorcentajeEvaluacion AS VARCHAR) + '%' ELSE 'N/A' END) "
+"ELSE 'N/D' END)\n		ELSE 'N/D'  END),\n	Estado = CASE WHEN dn.IdSituacionFinal IN (1) THEN 'Aprobado' WHEN dn.IdSituacion"
+"Final IN (2,3) THEN 'Reprobado'	ELSE 'N/D'  END\n	FROM #ReporteGlobalMallas tm\n		INNER JOIN MA_Nomina n on n.id = tm.Id"
+"NominaMalla AND tm.Persona_Id = n.idPersona\n		INNER JOIN MA_DetalleNOmina dn on dn.IdNomina = n.id\n	WHERE tm.id = #UC_"
+"ReporteGlobal.IdReporteGlobal and dn.IdUc = #UC_ReporteGlobal.IdUC\n\n\nSELECT	#ReporteGlobalMallas.[Id Malla], \n		#Rep"
+"orteGlobalMallas.Malla,\n		#ReporteGlobalMallas.[Fecha Creación], \n		#ReporteGlobalMallas.Estado, \n        #ReporteGlo"
+"balMallas.Escuela, \n		#ReporteGlobalMallas.[Versión Malla],\n		SUBSTRING(#ReporteGlobalMallas.[Vigencia Versión],1,10) "
+"AS [Vigencia Versión Desde],\n		SUBSTRING(#ReporteGlobalMallas.[Vigencia Versión],14,LEN(#ReporteGlobalMallas.[Vigencia "
+"Versión])) AS [Vigencia Versión Hasta], \n        #ReporteGlobalMallas.[Estado Versión], \n		#ReporteGlobalMallas.[Númer"
+"o Itinerario], \n		#ReporteGlobalMallas.[Nombre Itinerario],\n        SUBSTRING(#ReporteGlobalMallas.[Vigencia Itinerari"
+"o],1,10) AS [Itinerario Vigencia Desde],\n		SUBSTRING(#ReporteGlobalMallas.[Vigencia Itinerario],14,LEN(#ReporteGlobalMa"
+"llas.[Vigencia Itinerario])) AS [Itinerario Vigencia Hasta],\n		#ReporteGlobalMallas.[Estado Itinerario],\n		#ReporteGlo"
+"balMallas.RUT, \n        #ReporteGlobalMallas.[Nombre Colaborador], \n		MA_Nomina.FechaInscripcion AS [Fecha de Matricul"
+"a],\n		#ReporteGlobalMallas.EstadoColaborador, \n        #ReporteGlobalMallas.Email, \n		#ReporteGlobalMallas.[Sociedad "
+"Contratante], \n		#ReporteGlobalMallas.[Unidad Organizacional], \n        #ReporteGlobalMallas.[Unidad de Negocio], \n		"
+"COALESCE(#ReporteGlobalMallas.Área,'') AS Area,\n		#ReporteGlobalMallas.Local AS [Nombre Local], \n        #ReporteGloba"
+"lMallas.Local_Codigo AS [Código Local], \n		#ReporteGlobalMallas.Cargo, \n		#ReporteGlobalMallas.[Familia Cargo], \n    "
+"    COALESCE(#ReporteGlobalMallas.[Rut Jefe],'') AS [Rut Jefe], \n		COALESCE(#ReporteGlobalMallas.[Nombre Jefe],'') AS ["
+"Nombre Jefe], \n		COALESCE(#ReporteGlobalMallas.[Email Jefe],'') AS [Email Jefe], \n        #ReporteGlobalMallas.Avance,"
+" \n		CASE WHEN #ReporteGlobalMallas.Avance < 100 THEN 'No Completada' ELSE 'Completada' END AS [Estado de Avance],\n		#R"
+"eporteGlobalMallas.Cantidad, \n		#ReporteGlobalMallas.Aprobadas, \n        #ReporteGlobalMallas.Reprobadas, \n		#Reporte"
+"GlobalMallas.Pendientes, \n		CatalogoCurso.Nombre AS [Nombre UC],\n		#UC_ReporteGlobal.Estado AS [Estado UC],\n        #"
+"UC_ReporteGlobal.Nota, \n		#UC_ReporteGlobal.Fecha\nFROM	CatalogoCurso INNER JOIN\n        #UC_ReporteGlobal ON Catalogo"
+"Curso.Id = #UC_ReporteGlobal.IdUC INNER JOIN\n        #ReporteGlobalMallas ON #UC_ReporteGlobal.IdReporteGlobal = #Repor"
+"teGlobalMallas.Id inner JOIN\n        MA_Nomina ON #ReporteGlobalMallas.IdNominaMalla = MA_Nomina.Id\nWHERE (#UC_Reporte"
+"Global.Fecha <> '-') \n	AND MA_Nomina.FechaInscripcion = (SELECT MAX(n.FechaInscripcion) FROM  MA_Nomina n\n		INNER JOIN"
+" #ReporteGlobalMallas gm on gm.IdNominaMalla = n.id and n.IdPersona = gm.Persona_Id\n		WHERE n.IdPersona = MA_Nomina.IdP"
+"ersona)\nORDER BY #ReporteGlobalMallas.[Id Malla];\n\nDROP TABLE #ReporteGlobalMallas\nDROP TABLE #UC_ReporteGlobal\n";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.idMalla = 0;
							} else {
		                          
            row2.idMalla = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.Malla = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.Malla = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.Malla = tmpContent_tDBInput_2;
                }
            } else {
                row2.Malla = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.FechaCreacion = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.FechaCreacion = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.FechaCreacion = tmpContent_tDBInput_2;
                }
            } else {
                row2.FechaCreacion = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row2.Estado = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(4);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.Estado = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.Estado = tmpContent_tDBInput_2;
                }
            } else {
                row2.Estado = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row2.Escuela = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(5);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.Escuela = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.Escuela = tmpContent_tDBInput_2;
                }
            } else {
                row2.Escuela = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row2.VersionMalla = 0;
							} else {
		                          
            row2.VersionMalla = rs_tDBInput_2.getInt(6);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row2.VigenciaVersionDesde = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(7);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.VigenciaVersionDesde = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.VigenciaVersionDesde = tmpContent_tDBInput_2;
                }
            } else {
                row2.VigenciaVersionDesde = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row2.VigenciaVersionHasta = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(8);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.VigenciaVersionHasta = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.VigenciaVersionHasta = tmpContent_tDBInput_2;
                }
            } else {
                row2.VigenciaVersionHasta = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row2.EstadoVersion = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(9);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.EstadoVersion = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.EstadoVersion = tmpContent_tDBInput_2;
                }
            } else {
                row2.EstadoVersion = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row2.NumeroItinerario = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(10);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.NumeroItinerario = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.NumeroItinerario = tmpContent_tDBInput_2;
                }
            } else {
                row2.NumeroItinerario = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row2.NombreItinerario = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(11);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.NombreItinerario = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.NombreItinerario = tmpContent_tDBInput_2;
                }
            } else {
                row2.NombreItinerario = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row2.ItinerarioVigenciaDesde = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(12);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.ItinerarioVigenciaDesde = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.ItinerarioVigenciaDesde = tmpContent_tDBInput_2;
                }
            } else {
                row2.ItinerarioVigenciaDesde = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row2.ItinerarioVigenciaHasta = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(13);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.ItinerarioVigenciaHasta = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.ItinerarioVigenciaHasta = tmpContent_tDBInput_2;
                }
            } else {
                row2.ItinerarioVigenciaHasta = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row2.EstadoItinerario = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(14);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.EstadoItinerario = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.EstadoItinerario = tmpContent_tDBInput_2;
                }
            } else {
                row2.EstadoItinerario = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row2.RUT = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(15);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.RUT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.RUT = tmpContent_tDBInput_2;
                }
            } else {
                row2.RUT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row2.NombreColaborador = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(16);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.NombreColaborador = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.NombreColaborador = tmpContent_tDBInput_2;
                }
            } else {
                row2.NombreColaborador = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row2.FechaMatricula = null;
							} else {
										
			row2.FechaMatricula = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 17);
			
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row2.EstadoColaborador = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(18);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.EstadoColaborador = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.EstadoColaborador = tmpContent_tDBInput_2;
                }
            } else {
                row2.EstadoColaborador = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								row2.Email = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(19);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.Email = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.Email = tmpContent_tDBInput_2;
                }
            } else {
                row2.Email = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								row2.SociedadContratante = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(20);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.SociedadContratante = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.SociedadContratante = tmpContent_tDBInput_2;
                }
            } else {
                row2.SociedadContratante = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 21) {
								row2.UnidadOrganizacional = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(21);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.UnidadOrganizacional = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.UnidadOrganizacional = tmpContent_tDBInput_2;
                }
            } else {
                row2.UnidadOrganizacional = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 22) {
								row2.UnidadNegocio = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(22);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.UnidadNegocio = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.UnidadNegocio = tmpContent_tDBInput_2;
                }
            } else {
                row2.UnidadNegocio = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 23) {
								row2.Area = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(23);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(23).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.Area = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.Area = tmpContent_tDBInput_2;
                }
            } else {
                row2.Area = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 24) {
								row2.NombreLocal = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(24);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.NombreLocal = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.NombreLocal = tmpContent_tDBInput_2;
                }
            } else {
                row2.NombreLocal = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 25) {
								row2.CodigoLocal = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(25);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.CodigoLocal = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.CodigoLocal = tmpContent_tDBInput_2;
                }
            } else {
                row2.CodigoLocal = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 26) {
								row2.Cargo = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(26);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.Cargo = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.Cargo = tmpContent_tDBInput_2;
                }
            } else {
                row2.Cargo = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 27) {
								row2.FamiliaCargo = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(27);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.FamiliaCargo = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.FamiliaCargo = tmpContent_tDBInput_2;
                }
            } else {
                row2.FamiliaCargo = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 28) {
								row2.RutJefe = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(28);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.RutJefe = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.RutJefe = tmpContent_tDBInput_2;
                }
            } else {
                row2.RutJefe = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 29) {
								row2.NombreJefe = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(29);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.NombreJefe = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.NombreJefe = tmpContent_tDBInput_2;
                }
            } else {
                row2.NombreJefe = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 30) {
								row2.EmailJefe = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(30);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.EmailJefe = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.EmailJefe = tmpContent_tDBInput_2;
                }
            } else {
                row2.EmailJefe = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 31) {
								row2.Avance = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(31);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.Avance = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.Avance = tmpContent_tDBInput_2;
                }
            } else {
                row2.Avance = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 32) {
								row2.EstadoAvance = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(32);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.EstadoAvance = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.EstadoAvance = tmpContent_tDBInput_2;
                }
            } else {
                row2.EstadoAvance = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 33) {
								row2.Cantidad = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(33);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.Cantidad = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.Cantidad = tmpContent_tDBInput_2;
                }
            } else {
                row2.Cantidad = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 34) {
								row2.Aprobadas = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(34);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.Aprobadas = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.Aprobadas = tmpContent_tDBInput_2;
                }
            } else {
                row2.Aprobadas = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 35) {
								row2.Reprobadas = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(35);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.Reprobadas = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.Reprobadas = tmpContent_tDBInput_2;
                }
            } else {
                row2.Reprobadas = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 36) {
								row2.Pendientes = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(36);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.Pendientes = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.Pendientes = tmpContent_tDBInput_2;
                }
            } else {
                row2.Pendientes = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 37) {
								row2.NombreUC = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(37);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.NombreUC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.NombreUC = tmpContent_tDBInput_2;
                }
            } else {
                row2.NombreUC = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 38) {
								row2.EstadoUC = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(38);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.EstadoUC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.EstadoUC = tmpContent_tDBInput_2;
                }
            } else {
                row2.EstadoUC = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 39) {
								row2.Nota = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(39);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.Nota = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.Nota = tmpContent_tDBInput_2;
                }
            } else {
                row2.Nota = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 40) {
								row2.Fecha = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(40);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.Fecha = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.Fecha = tmpContent_tDBInput_2;
                }
            } else {
                row2.Fecha = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(row2.idMalla)));
									   				
	    				if(row2.Malla != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.Malla));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.FechaCreacion != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.FechaCreacion));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.Estado != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.Estado));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.Escuela != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.Escuela));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(row2.VersionMalla)));
									   				
	    				if(row2.VigenciaVersionDesde != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.VigenciaVersionDesde));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.VigenciaVersionHasta != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.VigenciaVersionHasta));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.EstadoVersion != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.EstadoVersion));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.NumeroItinerario != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.NumeroItinerario));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.NombreItinerario != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.NombreItinerario));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.ItinerarioVigenciaDesde != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.ItinerarioVigenciaDesde));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.ItinerarioVigenciaHasta != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.ItinerarioVigenciaHasta));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.EstadoItinerario != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.EstadoItinerario));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.RUT != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.RUT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.NombreColaborador != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.NombreColaborador));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.FechaMatricula != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(row2.FechaMatricula, "dd/MM/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.EstadoColaborador != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.EstadoColaborador));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.Email != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.Email));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.SociedadContratante != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.SociedadContratante));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.UnidadOrganizacional != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.UnidadOrganizacional));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.UnidadNegocio != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.UnidadNegocio));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.Area != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.Area));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.NombreLocal != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.NombreLocal));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.CodigoLocal != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.CodigoLocal));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.Cargo != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.Cargo));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.FamiliaCargo != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.FamiliaCargo));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.RutJefe != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.RutJefe));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.NombreJefe != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.NombreJefe));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.EmailJefe != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.EmailJefe));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.Avance != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.Avance));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.EstadoAvance != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.EstadoAvance));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.Cantidad != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.Cantidad));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.Aprobadas != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.Aprobadas));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.Reprobadas != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.Reprobadas));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.Pendientes != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.Pendientes));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.NombreUC != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.NombreUC));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.EstadoUC != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.EstadoUC));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.Nota != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.Nota));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.Fecha != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.Fecha));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

							columnIndex_tFileOutputExcel_1 = 0;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 1;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 2;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 3;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 4;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 5;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 6;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 7;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 8;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 9;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 10;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 11;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 12;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 13;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 14;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 15;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 16;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 17;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 18;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 19;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 20;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 21;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 22;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 23;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 24;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 25;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 26;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 27;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 28;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 29;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 30;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 31;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 32;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 33;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 34;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 35;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 36;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 37;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 38;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 39;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBInput_1Process(globalMap);



/**
 * [tFileOutputExcel_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_REPORTEADOR_ReporteGlobal = new byte[0];
    static byte[] commonByteArray_REPORTEADOR_ReporteGlobal = new byte[0];

	
			    public int IdMalla;

				public int getIdMalla () {
					return this.IdMalla;
				}
				
			    public String Malla;

				public String getMalla () {
					return this.Malla;
				}
				
			    public String FechaCreacion;

				public String getFechaCreacion () {
					return this.FechaCreacion;
				}
				
			    public String Estado;

				public String getEstado () {
					return this.Estado;
				}
				
			    public String Escuela;

				public String getEscuela () {
					return this.Escuela;
				}
				
			    public String VersionMalla;

				public String getVersionMalla () {
					return this.VersionMalla;
				}
				
			    public String VigenciaVersionDesde;

				public String getVigenciaVersionDesde () {
					return this.VigenciaVersionDesde;
				}
				
			    public String VigenciaVersionHasta;

				public String getVigenciaVersionHasta () {
					return this.VigenciaVersionHasta;
				}
				
			    public String EstadoVersion;

				public String getEstadoVersion () {
					return this.EstadoVersion;
				}
				
			    public String NumeroItinerario;

				public String getNumeroItinerario () {
					return this.NumeroItinerario;
				}
				
			    public String NombreItinerario;

				public String getNombreItinerario () {
					return this.NombreItinerario;
				}
				
			    public String VigenciaItinerarioDesde;

				public String getVigenciaItinerarioDesde () {
					return this.VigenciaItinerarioDesde;
				}
				
			    public String VigenciaItinerarioHasta;

				public String getVigenciaItinerarioHasta () {
					return this.VigenciaItinerarioHasta;
				}
				
			    public String EstadoItinerario;

				public String getEstadoItinerario () {
					return this.EstadoItinerario;
				}
				
			    public String RUT;

				public String getRUT () {
					return this.RUT;
				}
				
			    public String NombreColaborador;

				public String getNombreColaborador () {
					return this.NombreColaborador;
				}
				
			    public String FechaMatricula;

				public String getFechaMatricula () {
					return this.FechaMatricula;
				}
				
			    public String EstadoColaborador;

				public String getEstadoColaborador () {
					return this.EstadoColaborador;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public String SociedadContratante;

				public String getSociedadContratante () {
					return this.SociedadContratante;
				}
				
			    public String UnidadOrganizacional;

				public String getUnidadOrganizacional () {
					return this.UnidadOrganizacional;
				}
				
			    public String UnidadNegocio;

				public String getUnidadNegocio () {
					return this.UnidadNegocio;
				}
				
			    public String Area;

				public String getArea () {
					return this.Area;
				}
				
			    public String NombreLocal;

				public String getNombreLocal () {
					return this.NombreLocal;
				}
				
			    public String CodigoLocal;

				public String getCodigoLocal () {
					return this.CodigoLocal;
				}
				
			    public String Cargo;

				public String getCargo () {
					return this.Cargo;
				}
				
			    public String FamiliaCargo;

				public String getFamiliaCargo () {
					return this.FamiliaCargo;
				}
				
			    public String RutJefe;

				public String getRutJefe () {
					return this.RutJefe;
				}
				
			    public String NombreJefe;

				public String getNombreJefe () {
					return this.NombreJefe;
				}
				
			    public String EmailJefe;

				public String getEmailJefe () {
					return this.EmailJefe;
				}
				
			    public String Avance;

				public String getAvance () {
					return this.Avance;
				}
				
			    public String EstadoAvance;

				public String getEstadoAvance () {
					return this.EstadoAvance;
				}
				
			    public String Cantidad;

				public String getCantidad () {
					return this.Cantidad;
				}
				
			    public String Aprobadas;

				public String getAprobadas () {
					return this.Aprobadas;
				}
				
			    public String Reprobadas;

				public String getReprobadas () {
					return this.Reprobadas;
				}
				
			    public String Pendientes;

				public String getPendientes () {
					return this.Pendientes;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REPORTEADOR_ReporteGlobal.length) {
				if(length < 1024 && commonByteArray_REPORTEADOR_ReporteGlobal.length == 0) {
   					commonByteArray_REPORTEADOR_ReporteGlobal = new byte[1024];
				} else {
   					commonByteArray_REPORTEADOR_ReporteGlobal = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REPORTEADOR_ReporteGlobal, 0, length);
			strReturn = new String(commonByteArray_REPORTEADOR_ReporteGlobal, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REPORTEADOR_ReporteGlobal) {

        	try {

        		int length = 0;
		
			        this.IdMalla = dis.readInt();
					
					this.Malla = readString(dis);
					
					this.FechaCreacion = readString(dis);
					
					this.Estado = readString(dis);
					
					this.Escuela = readString(dis);
					
					this.VersionMalla = readString(dis);
					
					this.VigenciaVersionDesde = readString(dis);
					
					this.VigenciaVersionHasta = readString(dis);
					
					this.EstadoVersion = readString(dis);
					
					this.NumeroItinerario = readString(dis);
					
					this.NombreItinerario = readString(dis);
					
					this.VigenciaItinerarioDesde = readString(dis);
					
					this.VigenciaItinerarioHasta = readString(dis);
					
					this.EstadoItinerario = readString(dis);
					
					this.RUT = readString(dis);
					
					this.NombreColaborador = readString(dis);
					
					this.FechaMatricula = readString(dis);
					
					this.EstadoColaborador = readString(dis);
					
					this.Email = readString(dis);
					
					this.SociedadContratante = readString(dis);
					
					this.UnidadOrganizacional = readString(dis);
					
					this.UnidadNegocio = readString(dis);
					
					this.Area = readString(dis);
					
					this.NombreLocal = readString(dis);
					
					this.CodigoLocal = readString(dis);
					
					this.Cargo = readString(dis);
					
					this.FamiliaCargo = readString(dis);
					
					this.RutJefe = readString(dis);
					
					this.NombreJefe = readString(dis);
					
					this.EmailJefe = readString(dis);
					
					this.Avance = readString(dis);
					
					this.EstadoAvance = readString(dis);
					
					this.Cantidad = readString(dis);
					
					this.Aprobadas = readString(dis);
					
					this.Reprobadas = readString(dis);
					
					this.Pendientes = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.IdMalla);
					
					// String
				
						writeString(this.Malla,dos);
					
					// String
				
						writeString(this.FechaCreacion,dos);
					
					// String
				
						writeString(this.Estado,dos);
					
					// String
				
						writeString(this.Escuela,dos);
					
					// String
				
						writeString(this.VersionMalla,dos);
					
					// String
				
						writeString(this.VigenciaVersionDesde,dos);
					
					// String
				
						writeString(this.VigenciaVersionHasta,dos);
					
					// String
				
						writeString(this.EstadoVersion,dos);
					
					// String
				
						writeString(this.NumeroItinerario,dos);
					
					// String
				
						writeString(this.NombreItinerario,dos);
					
					// String
				
						writeString(this.VigenciaItinerarioDesde,dos);
					
					// String
				
						writeString(this.VigenciaItinerarioHasta,dos);
					
					// String
				
						writeString(this.EstadoItinerario,dos);
					
					// String
				
						writeString(this.RUT,dos);
					
					// String
				
						writeString(this.NombreColaborador,dos);
					
					// String
				
						writeString(this.FechaMatricula,dos);
					
					// String
				
						writeString(this.EstadoColaborador,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// String
				
						writeString(this.SociedadContratante,dos);
					
					// String
				
						writeString(this.UnidadOrganizacional,dos);
					
					// String
				
						writeString(this.UnidadNegocio,dos);
					
					// String
				
						writeString(this.Area,dos);
					
					// String
				
						writeString(this.NombreLocal,dos);
					
					// String
				
						writeString(this.CodigoLocal,dos);
					
					// String
				
						writeString(this.Cargo,dos);
					
					// String
				
						writeString(this.FamiliaCargo,dos);
					
					// String
				
						writeString(this.RutJefe,dos);
					
					// String
				
						writeString(this.NombreJefe,dos);
					
					// String
				
						writeString(this.EmailJefe,dos);
					
					// String
				
						writeString(this.Avance,dos);
					
					// String
				
						writeString(this.EstadoAvance,dos);
					
					// String
				
						writeString(this.Cantidad,dos);
					
					// String
				
						writeString(this.Aprobadas,dos);
					
					// String
				
						writeString(this.Reprobadas,dos);
					
					// String
				
						writeString(this.Pendientes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IdMalla="+String.valueOf(IdMalla));
		sb.append(",Malla="+Malla);
		sb.append(",FechaCreacion="+FechaCreacion);
		sb.append(",Estado="+Estado);
		sb.append(",Escuela="+Escuela);
		sb.append(",VersionMalla="+VersionMalla);
		sb.append(",VigenciaVersionDesde="+VigenciaVersionDesde);
		sb.append(",VigenciaVersionHasta="+VigenciaVersionHasta);
		sb.append(",EstadoVersion="+EstadoVersion);
		sb.append(",NumeroItinerario="+NumeroItinerario);
		sb.append(",NombreItinerario="+NombreItinerario);
		sb.append(",VigenciaItinerarioDesde="+VigenciaItinerarioDesde);
		sb.append(",VigenciaItinerarioHasta="+VigenciaItinerarioHasta);
		sb.append(",EstadoItinerario="+EstadoItinerario);
		sb.append(",RUT="+RUT);
		sb.append(",NombreColaborador="+NombreColaborador);
		sb.append(",FechaMatricula="+FechaMatricula);
		sb.append(",EstadoColaborador="+EstadoColaborador);
		sb.append(",Email="+Email);
		sb.append(",SociedadContratante="+SociedadContratante);
		sb.append(",UnidadOrganizacional="+UnidadOrganizacional);
		sb.append(",UnidadNegocio="+UnidadNegocio);
		sb.append(",Area="+Area);
		sb.append(",NombreLocal="+NombreLocal);
		sb.append(",CodigoLocal="+CodigoLocal);
		sb.append(",Cargo="+Cargo);
		sb.append(",FamiliaCargo="+FamiliaCargo);
		sb.append(",RutJefe="+RutJefe);
		sb.append(",NombreJefe="+NombreJefe);
		sb.append(",EmailJefe="+EmailJefe);
		sb.append(",Avance="+Avance);
		sb.append(",EstadoAvance="+EstadoAvance);
		sb.append(",Cantidad="+Cantidad);
		sb.append(",Aprobadas="+Aprobadas);
		sb.append(",Reprobadas="+Reprobadas);
		sb.append(",Pendientes="+Pendientes);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tFileOutputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_2", false);
		start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tFileOutputExcel_2 = 0;
		


		int columnIndex_tFileOutputExcel_2 = 0;
		
		String fileName_tFileOutputExcel_2=context.destination+"ReporteGlobalGeneral_"+TalendDate.formatDate("yyyyMMdd_HHmm",TalendDate.getCurrentDate())+".xlsx";
		int nb_line_tFileOutputExcel_2 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_2 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_2.setSheet("General");
		xlsxTool_tFileOutputExcel_2.setAppend(false,false);
		xlsxTool_tFileOutputExcel_2.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_2.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_2 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_2 = chm_tFileOutputExcel_2.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_2", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_2) {
			
				xlsxTool_tFileOutputExcel_2.prepareXlsxFile(fileName_tFileOutputExcel_2);
			
		}
		
		xlsxTool_tFileOutputExcel_2.setFont("");
		
		if (xlsxTool_tFileOutputExcel_2.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_2.addRow();
		
		xlsxTool_tFileOutputExcel_2.addCellValue("IdMalla");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Malla");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("FechaCreacion");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Estado");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Escuela");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("VersionMalla");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("VigenciaVersionDesde");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("VigenciaVersionHasta");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("EstadoVersion");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("NumeroItinerario");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("NombreItinerario");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("VigenciaItinerarioDesde");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("VigenciaItinerarioHasta");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("EstadoItinerario");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("RUT");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("NombreColaborador");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("FechaMatricula");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("EstadoColaborador");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Email");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("SociedadContratante");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("UnidadOrganizacional");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("UnidadNegocio");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Area");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("NombreLocal");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("CodigoLocal");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Cargo");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("FamiliaCargo");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("RutJefe");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("NombreJefe");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("EmailJefe");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Avance");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("EstadoAvance");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Cantidad");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Aprobadas");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Reprobadas");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Pendientes");
		
		nb_line_tFileOutputExcel_2++; 
		
	}
		

 



/**
 * [tFileOutputExcel_2 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_1 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "CREATE TABLE #ReporteGlobalMallas \n(Id INT IDENTITY(1, 1) PRIMARY KEY,\nFila BIGINT,\n[Id Malla] INT,\n[Malla] VARCHAR"
+"(255),\n[Fecha Creación] VARCHAR(255),\n[Estado] VARCHAR(255),\nIdNominaMalla INT,\nEscuela_Id INT,\n[Escuela] VARCHAR(2"
+"55),\n[Versión Malla] INT,\n[Vigencia Versión] VARCHAR(255),\n[Version_VigenciaDesde] VARCHAR(255),\nVersion_VigenciaHas"
+"ta VARCHAR(255),\n[Estado Versión] VARCHAR(255), \n[Número Itinerario] INT,\nItinerario_VigenciaDesde VARCHAR(255),\nIti"
+"nerario_VigenciaHasta VARCHAR(255),\n[Nombre Itinerario] VARCHAR(255),\n[Estado Itinerario] VARCHAR(255),\n[Vigencia Iti"
+"nerario] VARCHAR(255),\nPersona_Id INT,\n[RUT] VARCHAR(255),\n[Nombre Colaborador] VARCHAR(255),\nEstadoColaborador VARC"
+"HAR(255), \n[Email] VARCHAR(255), \nSociedadContratante_Id INT,\n[Sociedad Contratante] VARCHAR(255),  \nUOrganizacional"
+"_Id INT, \n[Unidad Organizacional] VARCHAR(255),\nUNegocio_Id INT,\n[Unidad de Negocio] VARCHAR(255), \nArea_Id INT, \n["
+"Área]  VARCHAR(255),\nLocal_Id INT, \nLocal_Codigo  VARCHAR(255), \n[Local] VARCHAR(255),\nCargo_Id INT,\n[Cargo] VARCHA"
+"R(255),\n[Familia Cargo] VARCHAR(255),\n[Rut Jefe] VARCHAR(255),\n[Nombre Jefe] VARCHAR(255), \n[Email Jefe] VARCHAR(255"
+"), \nAvance FLOAT,\n[Cantidad] INT, \nAprobadas INT,\nReprobadas INT,\nPendientes INT,\nProcesado INT,\nNominaActiva BIT"
+"\n)\n\nINSERT INTO  #ReporteGlobalMallas\n(Fila,[Id Malla],[Malla],[Fecha Creación],[Estado],IdNominaMalla,Escuela_Id,[E"
+"scuela],[Versión Malla],[Vigencia Versión],[Version_VigenciaDesde],Version_VigenciaHasta,\n[Estado Versión], [Número Iti"
+"nerario],Itinerario_VigenciaDesde,Itinerario_VigenciaHasta,[Nombre Itinerario],[Estado Itinerario],[Vigencia Itinerario]"
+",Persona_Id,\n[RUT],[Nombre Colaborador], EstadoColaborador, [Email], SociedadContratante_Id, [Sociedad Contratante],  U"
+"Organizacional_Id, [Unidad Organizacional],UNegocio_Id,\n[Unidad de Negocio], Area_Id, [Área],Local_Id, Local_Codigo, [L"
+"ocal],Cargo_Id,[Cargo],[Familia Cargo],[Rut Jefe],[Nombre Jefe], [Email Jefe], Avance,[Cantidad], Aprobadas,\nReprobadas"
+",Pendientes,Procesado,NominaActiva)\n\nSELECT  \n		ROW_NUMBER() OVER (ORDER BY m.Id DESC, p.ApellidoPaterno ASC),\n		m.I"
+"d,\n		m.Nombre,\n		CONVERT(VARCHAR(10), ISNULL(m.FechaCreacion, ''), 103), \n		(CASE WHEN m.Activo = 1 THEN 'Activa' ELS"
+"E 'No Activa' END),\n		nm.Id,\n		esc.Id,\n		esc.Nombre,\n		vm.[Version],\n		ISNULL(CONVERT(VARCHAR(10), ISNULL(vm.FechaI"
+"nicio, ''), 103), '') + ' - ' + ISNULL(CONVERT(VARCHAR(10), vm.FechaTermino, 103), ''),\n		vm.FechaInicio,\n		vm.FechaTe"
+"rmino, \n		(CASE WHEN vm.Activo = 1 THEN 'Vigente' ELSE 'No Vigente' END),\n		mi.Id,\n		mi.FechaInicio, \n		mi.FechaTerm"
+"ino,\n		mi.Nombre, \n		(CASE WHEN mi.Activo = 1 THEN 'Vigente' ELSE 'No Vigente' END), \n		ISNULL(CONVERT(VARCHAR(10), I"
+"SNULL(mi.FechaInicio, ''), 103), '') + ' - ' + ISNULL(CONVERT(VARCHAR(10), mi.FechaTermino, 103), ''),				\n		p.Id,\n		p"
+".IdentificacionUnica + '-' + p.Dv, \n		p.ApellidoPaterno + ' ' + p.ApellidoMaterno + ' ' + p.Nombre, \n		(CASE WHEN p.Ac"
+"tivo = 1 THEN 'Vigente' ELSE 'No Vigente' END),\n		ISNULL(p.Email, ''),\n		pl.IdSociedadContratante, \n		sc.Nombre,\n		u"
+"o.Id,\n		uo.Nombre, 		\n		un.Id,\n		un.Nombre, \n		a.Id,\n		a.Nombre, \n		loc.Id, \n		loc.CodigoLocal, \n		loc.NombreLoc"
+"al,\n		c.Id, \n		c.Nombre, 		\n		fc.Nombre,\n		pj.IdentificacionUnica + '-' + pj.Dv, \n		pj.Nombre + ' ' + pj.ApellidoPa"
+"terno + ' ' + pj.ApellidoMaterno, \n		pj.Email,				\n		CAST(CAST(CASE WHEN (SELECT COUNT(*) FROM MA_Componente mc\n		JOI"
+"N MA_Seccion ms ON ms.Id = mc.IdSeccion AND ms.IdSociedad = mc.IdSociedad WHERE ms.IdVersion = vm.Id) = 0 THEN CAST(0 AS"
+" FLOAT) \n		ELSE CAST(nm.CantUCAprobadas AS FLOAT)/CAST((SELECT COUNT(*) FROM MA_Componente mc JOIN MA_Seccion ms ON ms."
+"Id = mc.IdSeccion AND ms.IdSociedad = mc.IdSociedad\n		WHERE ms.IdVersion = vm.Id) AS FLOAT)*100.0 END AS DECIMAL(18,2))"
+" AS FLOAT),	\n		(SELECT COUNT(*) FROM MA_Componente mc JOIN MA_Seccion ms ON ms.Id = mc.IdSeccion AND ms.IdSociedad = mc"
+".IdSociedad WHERE ms.IdVersion = vm.Id), \n		nm.CantUCAprobadas,	\n		nm.CantUCReprobadas, \n	   (SELECT COUNT(*) FROM MA"
+"_Componente mc JOIN MA_Seccion ms ON ms.Id = mc.IdSeccion AND ms.IdSociedad = mc.IdSociedad WHERE ms.IdVersion = vm.Id) "
+"- (nm.CantUCAprobadas + nm.CantUCReprobadas),\n		0,\n		nm.Activo	\n		FROM MA_Malla m\n	LEFT JOIN MA_Version vm\n		ON m.I"
+"d = vm.IdMalla\n			AND m.IdSociedad = vm.IdSociedad\n	JOIN MA_Itinerario mi\n		ON vm.Id = mi.IdVersion\n			AND vm.IdSoci"
+"edad = mi.IdSociedad\n	JOIN MA_Nomina nm\n		ON mi.Id = nm.IdItinerario\n			AND mi.IdSociedad = nm.IdSociedad\n	JOIN Escu"
+"ela esc\n		ON esc.Id = m.IdEscuela\n	LEFT JOIN Personas p\n		ON p.Id = nm.IdPersona\n	JOIN PosicionLaboral pl\n		ON pl.I"
+"dPersona = p.Id\n			AND pl.Activo = 1 \n			AND pl.Estado = 2\n	JOIN InformacionPersonal ip\n		ON ip.IdPersona = p.Id\n	J"
+"OIN UnidadesOrganizacional uo\n		ON pl.IdUnidadOrganizacional = uo.Id\n	LEFT JOIN Cargos c\n		ON c.Id = pl.IdCargo\n	LEF"
+"T JOIN UnidadesNegocio un\n		ON un.Id = pl.IdUnidadNegocio\n	JOIN Sociedad sc\n		ON sc.Id = pl.IdSociedadContratante\n		"
+"	AND sc.Activo = 1\n	LEFT JOIN Area a\n		ON a.Id = ip.IdArea\n	LEFT JOIN [Locales] loc\n		ON loc.Id = ip.IdLocal\n	LEFT "
+"JOIN FamiliaCargo fc\n		ON c.IdFamiliaCargo = fc.Id\n	LEFT JOIN Personas pj\n		ON pl.IdPersonaJefe = pj.Id\n			AND pj.Ac"
+"tivo = 1\n	WHERE pl.Id = (SELECT MAX(pl1.Id) FROM PosicionLaboral pl1\n					WHERE pl1.IdPersona = pl.IdPersona\n					AND"
+" pl1.Estado = pl.Estado)\n	AND pl.Estado = 2\n	AND nm.Activo = 1\n	AND m.IdSociedad = "+ context.IdSociedad +"\n	ORDER BY \n	m.Id DESC,\n	p.ApellidoPaterno ASC\n\nCREATE TABLE #UC_ReporteGlobal \n	(Id INT IDENTITY(1, 1) PRIMARY K"
+"EY,IdReporteGlobal INT,IdUC INT,Fecha VARCHAR(255),Nota VARCHAR(255), Estado VARCHAR(255));\nWITH cteUninadesCurriculare"
+"s (idUc) AS \n	(\n	SELECT distinct  mc.IdUnidadCurricular\n		FROM #ReporteGlobalMallas\n			LEFT JOIN MA_Version vm ON vm"
+".IdMalla = #ReporteGlobalMallas.[Id Malla]\n			LEFT JOIN MA_Seccion ms	ON vm.Id = ms.IdVersion AND vm.IdSociedad = ms.Id"
+"Sociedad\n			LEFT JOIN MA_Componente mc ON ms.Id = mc.IdSeccion AND ms.IdSociedad = mc.IdSociedad\n			LEFT JOIN Catalogo"
+"Curso cc ON cc.Id = mc.IdUnidadCurricular AND mc.IdSociedad = cc.IdSociedad\n	)\n	INSERT INTO #UC_ReporteGlobal \n		(IdR"
+"eporteGlobal,IdUC,Fecha,Nota, Estado)\n	SELECT DISTINCT rgm.id as idReporteGlobal,uc.idUc,		\n	ISNULL((CASE WHEN CAST(uc"
+".idUc AS VARCHAR)  IN (SELECT MA_Componente.IdUnidadCurricular \n											 FROM MA_Version  \n												INNER JOIN M"
+"A_Seccion ON MA_Seccion.IdVersion = MA_Version.Id AND MA_Version.IdMalla =  rgm.[Id Malla] \n												INNER JOIN MA_C"
+"omponente ON MA_Componente.IdSeccion = MA_Seccion.Id) \n		THEN 'N/D' ELSE '-' END ),'-') AS Fecha,\n	ISNULL((CASE WHEN C"
+"AST(uc.idUc AS VARCHAR)  IN (SELECT MA_Componente.IdUnidadCurricular \n											 FROM MA_Version  \n												INNER "
+"JOIN MA_Seccion ON MA_Seccion.IdVersion = MA_Version.Id AND MA_Version.IdMalla =  rgm.[Id Malla] \n												INNER JOI"
+"N MA_Componente ON MA_Componente.IdSeccion = MA_Seccion.Id) \n		THEN 'N/D' ELSE '-' END ),'-') AS Nota,\n	ISNULL((CASE W"
+"HEN CAST(uc.idUc AS VARCHAR)  IN (SELECT MA_Componente.IdUnidadCurricular \n											 FROM MA_Version  \n												I"
+"NNER JOIN MA_Seccion ON MA_Seccion.IdVersion = MA_Version.Id AND MA_Version.IdMalla =  rgm.[Id Malla] \n												INNE"
+"R JOIN MA_Componente ON MA_Componente.IdSeccion = MA_Seccion.Id) \n		THEN 'N/D' ELSE '-' END ),'-') AS Estado\n	FROM #Re"
+"porteGlobalMallas rgm\n		CROSS JOIN cteUninadesCurriculares uc\n		INNER JOIN MA_Nomina n on n.id = rgm.IdNominaMalla AND"
+" rgm.Persona_Id = n.idPersona\n		LEFT JOIN MA_DetalleNOmina dn on dn.IdNomina = n.id\n	WHERE uc.idUc IS NOT NULL\n	ORDER"
+" BY rgm.id,uc.idUc\n\n	UPDATE #UC_ReporteGlobal\n	SET Fecha = ISNULL((CASE WHEN dn.IdSituacionFinal IN (1,2,3) THEN \n		"
+"						(CASE WHEN dn.FechaActualizacion IS NULL THEN 'N/D' ELSE CONVERT(varchar, dn.FechaActualizacion , 105) END) END),'"
+"-'),\n	Nota = (CASE \n			WHEN dn.IdSituacionFinal IN (1) THEN  \n				(CASE WHEN (dn.PorcentajeEvaluacion) IS NOT NULL \n"
+"					  THEN (CASE WHEN (dn.PorcentajeEvaluacion <> '-1') THEN CAST(dn.PorcentajeEvaluacion AS VARCHAR) + '%' ELSE 'N/A' "
+"END) ELSE 'N/D' END)\n	WHEN dn.IdSituacionFinal IN (2,3) THEN \n		(CASE WHEN (dn.PorcentajeEvaluacion) IS NOT NULL \n			"
+"  THEN (CASE WHEN (dn.PorcentajeEvaluacion <> '-1') THEN CAST(dn.PorcentajeEvaluacion AS VARCHAR) + '%' ELSE 'N/A' END) "
+"ELSE 'N/D' END)\n		ELSE 'N/D'  END),\n	Estado = CASE WHEN dn.IdSituacionFinal IN (1) THEN 'Aprobado' WHEN dn.IdSituacion"
+"Final IN (2,3) THEN 'Reprobado' ELSE 'N/D'  END\n	FROM #ReporteGlobalMallas tm\n		INNER JOIN MA_Nomina n ON n.id = tm.Id"
+"NominaMalla AND tm.Persona_Id = n.idPersona\n		INNER JOIN MA_DetalleNOmina dn ON dn.IdNomina = n.id\n	WHERE tm.id = #UC_"
+"ReporteGlobal.IdReporteGlobal AND dn.IdUc = #UC_ReporteGlobal.IdUC\n\nSELECT	DISTINCT\n		#ReporteGlobalMallas.[Id Malla]"
+", \n		#ReporteGlobalMallas.Malla,\n		#ReporteGlobalMallas.[Fecha Creación], \n		#ReporteGlobalMallas.Estado, \n        #"
+"ReporteGlobalMallas.Escuela, \n		#ReporteGlobalMallas.[Versión Malla],\n		SUBSTRING(#ReporteGlobalMallas.[Vigencia Versi"
+"ón],1,10) AS [Vigencia Versión Desde],\n		SUBSTRING(#ReporteGlobalMallas.[Vigencia Versión],14,LEN(#ReporteGlobalMallas."
+"[Vigencia Versión])) AS [Vigencia Versión Hasta], \n        #ReporteGlobalMallas.[Estado Versión], \n		#ReporteGlobalMal"
+"las.[Número Itinerario], \n		#ReporteGlobalMallas.[Nombre Itinerario],\n        SUBSTRING(#ReporteGlobalMallas.[Vigencia"
+" Itinerario],1,10) AS [Itinerario Vigencia Desde],\n		SUBSTRING(#ReporteGlobalMallas.[Vigencia Itinerario],14,LEN(#Repor"
+"teGlobalMallas.[Vigencia Itinerario])) AS [Itinerario Vigencia Hasta],\n		#ReporteGlobalMallas.[Estado Itinerario],\n		#"
+"ReporteGlobalMallas.RUT, \n        #ReporteGlobalMallas.[Nombre Colaborador], \n		MA_Nomina.FechaInscripcion AS [Fecha d"
+"e Matricula],\n		#ReporteGlobalMallas.EstadoColaborador, \n        #ReporteGlobalMallas.Email, \n		#ReporteGlobalMallas."
+"[Sociedad Contratante], \n		#ReporteGlobalMallas.[Unidad Organizacional], \n        #ReporteGlobalMallas.[Unidad de Nego"
+"cio], \n		ISNULL(#ReporteGlobalMallas.Área,'') AS Area,\n		#ReporteGlobalMallas.Local AS [Nombre Local], \n        #Repo"
+"rteGlobalMallas.Local_Codigo AS [Código Local], \n		#ReporteGlobalMallas.Cargo, \n		#ReporteGlobalMallas.[Familia Cargo]"
+", \n        ISNULL(#ReporteGlobalMallas.[Rut Jefe] ,'') AS [Rut Jefe], \n		ISNULL(#ReporteGlobalMallas.[Nombre Jefe],'')"
+" AS [Nombre Jefe], \n		ISNULL(#ReporteGlobalMallas.[Email Jefe],'') AS [Email Jefe], \n        #ReporteGlobalMallas.Avan"
+"ce, \n		CASE WHEN #ReporteGlobalMallas.Avance < 100 THEN 'No Completada' ELSE 'Completada' END AS [Estado de Avance],\n	"
+"	#ReporteGlobalMallas.Cantidad, \n		#ReporteGlobalMallas.Aprobadas, \n        #ReporteGlobalMallas.Reprobadas, \n		#Repo"
+"rteGlobalMallas.Pendientes \nFROM	\n        #UC_ReporteGlobal\n		INNER JOIN #ReporteGlobalMallas ON #UC_ReporteGlobal.Id"
+"ReporteGlobal = #ReporteGlobalMallas.Id \n		LEFT OUTER JOIN MA_Nomina ON #ReporteGlobalMallas.IdNominaMalla = MA_Nomina."
+"Id\nWHERE (#UC_ReporteGlobal.Fecha <> '-') \n	AND MA_Nomina.FechaInscripcion = (SELECT MAX(n.FechaInscripcion) FROM  MA_"
+"Nomina n\n		INNER JOIN #ReporteGlobalMallas gm ON gm.IdNominaMalla = n.id AND n.IdPersona = gm.Persona_Id\n		WHERE n.IdP"
+"ersona = MA_Nomina.IdPersona)\nORDER BY #ReporteGlobalMallas.[Id Malla];\n\nDROP TABLE #ReporteGlobalMallas\nDROP TABLE "
+"#UC_ReporteGlobal\n";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.IdMalla = 0;
							} else {
		                          
            row1.IdMalla = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.Malla = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Malla = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.Malla = tmpContent_tDBInput_1;
                }
            } else {
                row1.Malla = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.FechaCreacion = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.FechaCreacion = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.FechaCreacion = tmpContent_tDBInput_1;
                }
            } else {
                row1.FechaCreacion = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.Estado = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Estado = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.Estado = tmpContent_tDBInput_1;
                }
            } else {
                row1.Estado = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.Escuela = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Escuela = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.Escuela = tmpContent_tDBInput_1;
                }
            } else {
                row1.Escuela = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.VersionMalla = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.VersionMalla = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.VersionMalla = tmpContent_tDBInput_1;
                }
            } else {
                row1.VersionMalla = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.VigenciaVersionDesde = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(7);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.VigenciaVersionDesde = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.VigenciaVersionDesde = tmpContent_tDBInput_1;
                }
            } else {
                row1.VigenciaVersionDesde = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.VigenciaVersionHasta = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(8);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.VigenciaVersionHasta = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.VigenciaVersionHasta = tmpContent_tDBInput_1;
                }
            } else {
                row1.VigenciaVersionHasta = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.EstadoVersion = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(9);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.EstadoVersion = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.EstadoVersion = tmpContent_tDBInput_1;
                }
            } else {
                row1.EstadoVersion = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.NumeroItinerario = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(10);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.NumeroItinerario = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.NumeroItinerario = tmpContent_tDBInput_1;
                }
            } else {
                row1.NumeroItinerario = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.NombreItinerario = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(11);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.NombreItinerario = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.NombreItinerario = tmpContent_tDBInput_1;
                }
            } else {
                row1.NombreItinerario = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.VigenciaItinerarioDesde = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(12);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.VigenciaItinerarioDesde = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.VigenciaItinerarioDesde = tmpContent_tDBInput_1;
                }
            } else {
                row1.VigenciaItinerarioDesde = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.VigenciaItinerarioHasta = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(13);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.VigenciaItinerarioHasta = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.VigenciaItinerarioHasta = tmpContent_tDBInput_1;
                }
            } else {
                row1.VigenciaItinerarioHasta = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.EstadoItinerario = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(14);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.EstadoItinerario = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.EstadoItinerario = tmpContent_tDBInput_1;
                }
            } else {
                row1.EstadoItinerario = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.RUT = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(15);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.RUT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.RUT = tmpContent_tDBInput_1;
                }
            } else {
                row1.RUT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.NombreColaborador = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(16);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.NombreColaborador = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.NombreColaborador = tmpContent_tDBInput_1;
                }
            } else {
                row1.NombreColaborador = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.FechaMatricula = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(17);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.FechaMatricula = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.FechaMatricula = tmpContent_tDBInput_1;
                }
            } else {
                row1.FechaMatricula = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.EstadoColaborador = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(18);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.EstadoColaborador = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.EstadoColaborador = tmpContent_tDBInput_1;
                }
            } else {
                row1.EstadoColaborador = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.Email = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(19);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Email = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.Email = tmpContent_tDBInput_1;
                }
            } else {
                row1.Email = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.SociedadContratante = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(20);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SociedadContratante = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.SociedadContratante = tmpContent_tDBInput_1;
                }
            } else {
                row1.SociedadContratante = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.UnidadOrganizacional = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(21);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.UnidadOrganizacional = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.UnidadOrganizacional = tmpContent_tDBInput_1;
                }
            } else {
                row1.UnidadOrganizacional = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.UnidadNegocio = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(22);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.UnidadNegocio = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.UnidadNegocio = tmpContent_tDBInput_1;
                }
            } else {
                row1.UnidadNegocio = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.Area = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(23);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(23).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Area = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.Area = tmpContent_tDBInput_1;
                }
            } else {
                row1.Area = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.NombreLocal = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(24);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.NombreLocal = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.NombreLocal = tmpContent_tDBInput_1;
                }
            } else {
                row1.NombreLocal = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.CodigoLocal = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(25);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CodigoLocal = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.CodigoLocal = tmpContent_tDBInput_1;
                }
            } else {
                row1.CodigoLocal = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.Cargo = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(26);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Cargo = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.Cargo = tmpContent_tDBInput_1;
                }
            } else {
                row1.Cargo = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.FamiliaCargo = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(27);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.FamiliaCargo = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.FamiliaCargo = tmpContent_tDBInput_1;
                }
            } else {
                row1.FamiliaCargo = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.RutJefe = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(28);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.RutJefe = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.RutJefe = tmpContent_tDBInput_1;
                }
            } else {
                row1.RutJefe = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.NombreJefe = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(29);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.NombreJefe = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.NombreJefe = tmpContent_tDBInput_1;
                }
            } else {
                row1.NombreJefe = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.EmailJefe = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(30);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.EmailJefe = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.EmailJefe = tmpContent_tDBInput_1;
                }
            } else {
                row1.EmailJefe = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.Avance = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(31);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Avance = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.Avance = tmpContent_tDBInput_1;
                }
            } else {
                row1.Avance = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.EstadoAvance = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(32);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.EstadoAvance = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.EstadoAvance = tmpContent_tDBInput_1;
                }
            } else {
                row1.EstadoAvance = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.Cantidad = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(33);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Cantidad = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.Cantidad = tmpContent_tDBInput_1;
                }
            } else {
                row1.Cantidad = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.Aprobadas = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(34);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Aprobadas = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.Aprobadas = tmpContent_tDBInput_1;
                }
            } else {
                row1.Aprobadas = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.Reprobadas = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(35);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Reprobadas = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.Reprobadas = tmpContent_tDBInput_1;
                }
            } else {
                row1.Reprobadas = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.Pendientes = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(36);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Pendientes = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.Pendientes = tmpContent_tDBInput_1;
                }
            } else {
                row1.Pendientes = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

				xlsxTool_tFileOutputExcel_2.addRow();
									
							xlsxTool_tFileOutputExcel_2.addCellValue(Double.parseDouble(String.valueOf(row1.IdMalla)));
									   				
	    				if(row1.Malla != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.Malla));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.FechaCreacion != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.FechaCreacion));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.Estado != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.Estado));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.Escuela != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.Escuela));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.VersionMalla != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.VersionMalla));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.VigenciaVersionDesde != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.VigenciaVersionDesde));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.VigenciaVersionHasta != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.VigenciaVersionHasta));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.EstadoVersion != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.EstadoVersion));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.NumeroItinerario != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.NumeroItinerario));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.NombreItinerario != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.NombreItinerario));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.VigenciaItinerarioDesde != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.VigenciaItinerarioDesde));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.VigenciaItinerarioHasta != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.VigenciaItinerarioHasta));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.EstadoItinerario != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.EstadoItinerario));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.RUT != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.RUT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.NombreColaborador != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.NombreColaborador));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.FechaMatricula != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.FechaMatricula));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.EstadoColaborador != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.EstadoColaborador));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.Email != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.Email));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.SociedadContratante != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.SociedadContratante));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.UnidadOrganizacional != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.UnidadOrganizacional));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.UnidadNegocio != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.UnidadNegocio));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.Area != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.Area));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.NombreLocal != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.NombreLocal));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.CodigoLocal != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.CodigoLocal));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.Cargo != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.Cargo));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.FamiliaCargo != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.FamiliaCargo));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.RutJefe != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.RutJefe));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.NombreJefe != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.NombreJefe));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.EmailJefe != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.EmailJefe));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.Avance != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.Avance));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.EstadoAvance != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.EstadoAvance));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.Cantidad != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.Cantidad));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.Aprobadas != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.Aprobadas));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.Reprobadas != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.Reprobadas));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row1.Pendientes != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row1.Pendientes));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_2++;
				
 


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

							columnIndex_tFileOutputExcel_2 = 0;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 1;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 2;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 3;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 4;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 5;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 6;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 7;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 8;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 9;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 10;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 11;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 12;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 13;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 14;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 15;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 16;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 17;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 18;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 19;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 20;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 21;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 22;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 23;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 24;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 25;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 26;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 27;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 28;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 29;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 30;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 31;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 32;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 33;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 34;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 35;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
	
	
	
			xlsxTool_tFileOutputExcel_2.writeExcel(fileName_tFileOutputExcel_2,true);
	
		
			nb_line_tFileOutputExcel_2 = nb_line_tFileOutputExcel_2 -1;
		
		globalMap.put("tFileOutputExcel_2_NB_LINE",nb_line_tFileOutputExcel_2);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_2", true);
end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileArchive_1Process(globalMap);



/**
 * [tFileOutputExcel_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_1", false);
		start_Hash.put("tFileArchive_1", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_1";

	
		int tos_count_tFileArchive_1 = 0;
		

 



/**
 * [tFileArchive_1 begin ] stop
 */
	
	/**
	 * [tFileArchive_1 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

	

		String sourceFile_tFileArchive_1 = context.destination;
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_1), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_1 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_1 = context.destination+"ReporteGlobal.zip";
    
    com.talend.compress.zip.Zip zip_tFileArchive_1 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_1, zipFile_tFileArchive_1);
    zip_tFileArchive_1.setOverwriteExistTargetZip(true);
	zip_tFileArchive_1.setMakeTargetDir(false);
	zip_tFileArchive_1.setCompressLevel(4);
	zip_tFileArchive_1.setArchiveFormat("zip");
	zip_tFileArchive_1.setAllFiles(false);
	
	  
    	//build filename pattern filter
	    String[] patterns_tFileArchive_1 = new String[1];
    	
	        patterns_tFileArchive_1[0] = "*.xlsx";
  		StringBuilder sbf_tFileArchive_1 = new StringBuilder(); 
        sbf_tFileArchive_1.append("(");
        for (int i_tFileArchive_1 = 0 ; i_tFileArchive_1 < patterns_tFileArchive_1.length ; i_tFileArchive_1++) {
            sbf_tFileArchive_1.append(patterns_tFileArchive_1[i_tFileArchive_1].replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*"));
            if(i_tFileArchive_1 != patterns_tFileArchive_1.length-1) sbf_tFileArchive_1.append("|");
        }        
        sbf_tFileArchive_1.append(")");
        final String maskStr_tFileArchive_1 = new String(sbf_tFileArchive_1.toString());
        
        //apply the filter
       	zip_tFileArchive_1.setNamePatternFilter(maskStr_tFileArchive_1);
	
	   zip_tFileArchive_1.setContainSubDir(false);
	   zip_tFileArchive_1.setEncoding("ISO-8859-15");
	   zip_tFileArchive_1.setZip64Mode("ASNEEDED");
	   zip_tFileArchive_1.setEncrypted(false);
		        
	   
	    
	    
	final String decryptedPassword_tFileArchive_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:PRSgMlZaspY6eL/0dPTdI0F547C40MpXtXn1BA==");
	    
	   zip_tFileArchive_1.setPassword(decryptedPassword_tFileArchive_1);
	   
	      zip_tFileArchive_1.setUseZip4jEncryption(true);
	      zip_tFileArchive_1.setEncryptionMethod(net.lingala.zip4j.util.Zip4jConstants.ENC_METHOD_STANDARD);
	      
  
  
   globalMap.put("tFileArchive_1_ARCHIVE_FILEPATH",zipFile_tFileArchive_1);
   
   globalMap.put("tFileArchive_1_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_1).getName());

   zip_tFileArchive_1.doZip();


 


	tos_count_tFileArchive_1++;

/**
 * [tFileArchive_1 main ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_1 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 

ok_Hash.put("tFileArchive_1", true);
end_Hash.put("tFileArchive_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tFileList_1Process(globalMap);



/**
 * [tFileArchive_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_1 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tFileDelete_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
	
 
     
    
  String directory_tFileList_1 = context.destination;
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_1.add("*.xlsx");  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1);
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = true;
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
     
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	
	/**
	 * [tFileList_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileDelete_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk6", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileDelete_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
		int tos_count_tFileDelete_1 = 0;
		

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(((String)globalMap.get("tFileList_1_CURRENT_FILEPATH")));
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",((String)globalMap.get("tFileList_1_CURRENT_FILEPATH")));
    
     
 

 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tFileDelete_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileDelete_1);
						}				
					




	
	/**
	 * [tFileList_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_end ] stop
 */
	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());




/**
 * [tFileList_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println( ((String)globalMap.get("tFileList_1_CURRENT_FILE"))+ " ha sido eliminado." );
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "test";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final ReporteGlobal ReporteGlobalClass = new ReporteGlobal();

        int exitCode = ReporteGlobalClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ReporteGlobal.class.getClassLoader().getResourceAsStream("reporteador/reporteglobal_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = ReporteGlobal.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("database", "id_String");
                            context.database=(String) context.getProperty("database");
                        context.setContextType("destination", "id_String");
                            context.destination=(String) context.getProperty("destination");
                        context.setContextType("filename", "id_String");
                            context.filename=(String) context.getProperty("filename");
                        context.setContextType("host", "id_String");
                            context.host=(String) context.getProperty("host");
                        context.setContextType("IdSociedad", "id_String");
                            context.IdSociedad=(String) context.getProperty("IdSociedad");
                        context.setContextType("password", "id_Password");
                            String pwd_password_value = context.getProperty("password");
                            context.password = null;
                            if(pwd_password_value!=null) {
                                if(context_param.containsKey("password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.password = pwd_password_value;
                                } else if (!pwd_password_value.isEmpty()) {
                                    try {
                                        context.password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_password_value);
                                        context.put("password",context.password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("port", "id_String");
                            context.port=(String) context.getProperty("port");
                        context.setContextType("username", "id_String");
                            context.username=(String) context.getProperty("username");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("database")) {
                context.database = (String) parentContextMap.get("database");
            }if (parentContextMap.containsKey("destination")) {
                context.destination = (String) parentContextMap.get("destination");
            }if (parentContextMap.containsKey("filename")) {
                context.filename = (String) parentContextMap.get("filename");
            }if (parentContextMap.containsKey("host")) {
                context.host = (String) parentContextMap.get("host");
            }if (parentContextMap.containsKey("IdSociedad")) {
                context.IdSociedad = (String) parentContextMap.get("IdSociedad");
            }if (parentContextMap.containsKey("password")) {
                context.password = (java.lang.String) parentContextMap.get("password");
            }if (parentContextMap.containsKey("port")) {
                context.port = (String) parentContextMap.get("port");
            }if (parentContextMap.containsKey("username")) {
                context.username = (String) parentContextMap.get("username");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ReporteGlobal");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     221302 characters generated by Talend Open Studio for Data Integration 
 *     on the 24 de agosto de 2020 11:46:03 CLT
 ************************************************************************************************/